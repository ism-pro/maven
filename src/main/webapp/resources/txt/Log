
================================================================================
PROPOSITION D'AMELIORATION
================================================================================
Proposition dans les préférences utilisateurs :
    - Ajouter le nombre d'éléments de résultat par table par défaut. (row)

A Faire :

2 - UTILISATEUR :
    2.3. Ajouter les options de programme comme :
        
        - Les paramètres d'options de résultat
        Options de l'utilisateur connecter
    + Fournir la possibilité de mettre une image,
    + Ajouter au staff les informations suivantes :
        + Rue / code postal / ville
        + Email / Phone / Info
        
3 - Non conformités :
    + Effectuer un chargement partiel,
    + Effectuer la sauvegarde du choix de paramètre de sélection de processus
    + Réaliser un diagramme de planning en jalon pour les non-conformités entre date prévu et date résolution,
    + Fournir la possibilité d’ajouter une image.
    + Lors de la saisie des actions ajouter la possibilité d’indiquer les causes possibles par ordre croissant de probabilité,
    + possibilité d'avoir un état d'impression
        




Configuration :
    + RUBAN :
    ++ Gestion des accès utilisateurs

    + GENERALITES :
    ++ Possibilité de configurer la fenêtre de confirmation globale voir bas de la page main 
      Notemment les effets à l'ouverture ...
    
    + CRUD :
    ++ Enregistrer les options de viewTab entre les sessions.

    + PROCESSUS :
    ++ Ajouter une page de recherche + result + exportation

    + DOC EXPLORER :
    + Permettre d'avoir un classement en fonction d'une catégorie et un groupe 
    surtout pour les processus volumineux.


    + TODO SHORTCUT
    ++ Gestion des shortcut et toggler.

    + TODO RESOURCES
    ++ 
    ++ staffGroupDef : gestion crud de la définition des groupes utilisateur
    ++ staffRôleList : gestion crud de la définition des groupes utilisateur
    ++ staffRoleTree : Revoir la méthodologie de définition des droits d'accès sous forme de tableau
    ++ staffCompany : gestion crud de l'association des utilisateurs à une société.
    ++ Accès : gestion crud des accès utilisateur sous forme de tableau
    ++ Gestion de la création de staff
    ++ Présentation des staffs.
    


     COMMIT
================================================================================
# GENERALITES :
================================================================================
# POM :


# SECURITY :






================================================================================
# SPECIFIQUE
================================================================================
# Entité :
* Suppression de passwordConf de l'entité "Staff"

# Onglet ressources :
* Actualisation de la création d'un utilisateur et information d'accès par wizard

 















********************************************************************************
ETAPE DE GESTION DES CONTROLLEUR JSF
********************************************************************************
Test après changement :
    + Modifier les entités : ajouter une fonction du type getItemByLast
    + Modifier la EJB en ajoutant 3 fonctions de clé et désignation
      Pour les
    + Modifier les propriétés de message
    + Modifier le contrôler en utilisant bien le bean
    + Modifier le viewTabManager 
        - Créer les paramètre (controleur, list pour tri, list pour filtre)
        - Initialiser le context et affecter la liste de tri avec getItemsByLastChange
        - Créer les getter et setter (List tri, liste filtre)
        - Créer une ligne dans handleTableChanges pour récupéer la dernière list
        - Créer une ligne dans handleDestroy pour mettre à jour après suppression de ligne
    + Modifier List - View - Create - Edit



********************************************************************************
ETAPE DE GESTION D'ACCES
********************************************************************************
1 - Ouvrir le fichier access.xlsx pour ajouté un nouvelle accès en respectant la 
nommenclature.
2 - Modifier le fichier web.xml en y ajoutant
    - les security-constraint,
    - les rôle d'accès
3 - Ajouter au bundle security les infos d'accès
4 - Modifier le fichier CtrlAccessService de l'arbre d'application
5 - Ajouter ou retirer l'accès des rôles existant en database en veillant au liaison de groupe
6 - 



package org.ism.jsf;

import org.ism.entities.StaffGroups;
import org.ism.jsf.util.JsfUtil;
import org.ism.jsf.util.JsfUtil.PersistAction;
import org.ism.sessions.StaffGroupsFacade;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.EJBException;
import javax.inject.Named;
import javax.enterprise.context.SessionScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;
import org.ism.entities.Company;
import org.ism.entities.Staff;
import org.ism.entities.StaffGroupDef;


@ManagedBean(name = "staffGroupsController")
@SessionScoped
public class StaffGroupsController implements Serializable {
    private static final long serialVersionUID = 1L;


    @EJB private org.ism.sessions.StaffGroupsFacade ejbFacade;
    private List<StaffGroups> items = null;
    private StaffGroups selected;

    public StaffGroupsController() {
    }

    public StaffGroups getSelected() {
        return selected;
    }

    public void setSelected(StaffGroups selected) {
        this.selected = selected;
    }

    protected void setEmbeddableKeys() {
    }

    protected void initializeEmbeddableKey() {
    }

    private StaffGroupsFacade getFacade() {
        return ejbFacade;
    }

    public StaffGroups prepareCreate() {
        selected = new StaffGroups();
        initializeEmbeddableKey();
        return selected;
    }

    public void create() {
        selected.setStgCreated(new Date());
        selected.setStgChanged(new Date());
        persist(PersistAction.CREATE, ResourceBundle.getBundle(JsfUtil.BUNDLE).getString("PersistenceCreated"));
        if (!JsfUtil.isValidationFailed()) {
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public void update() {
        selected.setStgChanged(new Date());
        persist(PersistAction.UPDATE, ResourceBundle.getBundle(JsfUtil.BUNDLE).getString("PersistenceUpdated"));
    }

    public void destroy() {
        persist(PersistAction.DELETE, ResourceBundle.getBundle(JsfUtil.BUNDLE).getString("PersistenceDeleted"));
        if (!JsfUtil.isValidationFailed()) {
            selected = null; // Remove selection
            items = null;    // Invalidate list of items to trigger re-query.
        }
    }

    public List<StaffGroups> getItems() {
        //if (items == null) {
            items = getFacade().findAll();
        //}else if(items.size()==1){
        //    items = getFacade().findAll();
        //}
        return items;
    }

    private void persist(PersistAction persistAction, String successMessage) {
        if (selected != null) {
            setEmbeddableKeys();
            try {
                if (persistAction != PersistAction.DELETE) {
                    getFacade().edit(selected);
                } else {
                    getFacade().remove(selected);
                }
                JsfUtil.addSuccessMessage(successMessage);
            } catch (EJBException ex) {
                String msg = "";
                Throwable cause = ex.getCause();
                if (cause != null) {
                    msg = cause.getLocalizedMessage();
                }
                if (msg.length() > 0) {
                    JsfUtil.addErrorMessage(msg);
                } else {
                    JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle(JsfUtil.BUNDLE).getString("PersistenceErrorOccured"));
                }
            } catch (Exception ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                JsfUtil.addErrorMessage(ex, ResourceBundle.getBundle(JsfUtil.BUNDLE).getString("PersistenceErrorOccured"));
            }
        }
    }

    public StaffGroups getStaffGroups(java.lang.Integer id) {
        return getFacade().find(id);
    }

    public List<StaffGroups> getItems(Staff staff) {
        items = getFacade().findByStaff(staff);
        return items;
    }
    
    public List<StaffGroups> getItemsAvailableSelectMany() {
        return getFacade().findAll();
    }

    public List<StaffGroups> getItemsAvailableSelectOne() {
        return getFacade().findAll();
    }

    StaffGroups getStaffGroups(Staff staff, Company company, StaffGroupDef staffGroupDef) {
        return ejbFacade.findByStaffAndCompanyAndGroupDef(staff, company, staffGroupDef);
    }

    @FacesConverter(forClass=StaffGroups.class)
    public static class StaffGroupsControllerConverter implements Converter {

        @Override
        public Object getAsObject(FacesContext facesContext, UIComponent component, String value) {
            if (value == null || value.length() == 0) {
                return null;
            }
            StaffGroupsController controller = (StaffGroupsController)facesContext.getApplication().getELResolver().
                    getValue(facesContext.getELContext(), null, "staffGroupsController");
            return controller.getStaffGroups(getKey(value));
        }

        java.lang.Integer getKey(String value) {
            java.lang.Integer key;
            key = Integer.valueOf(value);
            return key;
        }

        String getStringKey(java.lang.Integer value) {
            StringBuilder sb = new StringBuilder();
            sb.append(value);
            return sb.toString();
        }

        @Override
        public String getAsString(FacesContext facesContext, UIComponent component, Object object) {
            if (object == null) {
                return null;
            }
            if (object instanceof StaffGroups) {
                StaffGroups o = (StaffGroups) object;
                return getStringKey(o.getStgId());
            } else {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, "object {0} is of type {1}; expected type: {2}", new Object[]{object, object.getClass().getName(), StaffGroups.class.getName()});
                return null;
            }
        }

    }

}
